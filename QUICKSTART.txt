==================================
SIMPLE RAG PIPELINE - QUICK START
==================================

This guide will help you quickly get started with the RAG (Retrieval-Augmented Generation) pipeline.

PREREQUISITES:
-------------
- Docker Desktop installed and running
- Minimum 2GB RAM, dual-core CPU
- About 1GB free disk space
- Ollama with llama3:8b model installed on your host machine

GETTING STARTED:
--------------
1. Make sure Docker Desktop is running on your system.

2. Navigate to the project directory:
   cd GuestLectureCS3820_liveDemo2025

3. Make the script executable (REQUIRED for macOS/Linux):
   chmod +x reset_rag.sh build-fast.sh

4. Build the optimized Docker image:
   ./build-fast.sh
   
   This uses Docker BuildKit for optimal performance and layer caching.

5. Start the RAG system by running:
   docker-compose up -d
   
   Alternatively, you can run the reset script to clear any previous data:
   ./reset_rag.sh

   This script will:
   - Stop any existing containers
   - Clear any previous data
   - Rebuild with optimized settings
   - Start the RAG system
   - Wait for the system to be ready

6. Open your browser and go to: http://localhost:8501

USING THE RAG PIPELINE:
---------------------
1. Upload Documents:
   - Go to the "Upload Documents" tab
   - Upload files in any supported format (PDF, DOCX, TXT, etc.)
   - Click "Process Documents" to index them
   - Wait for processing to complete

2. Ask Questions:
   - Go to the "Ask Questions" tab
   - Type a question related to your documents
   - Click "Get Answer"
   - View the answer generated from your documents

3. Reset or Clear Data:
   - Option 1: Click the "Clean Vector Store" button in the Upload Documents tab to clear all indexed documents without restarting
   - Option 2: Run ./reset_rag.sh again to clear all data and restart the application

OPTIMIZATION DETAILS:
-------------------
This version includes several performance optimizations:

- Multi-stage Docker builds for faster builds and smaller images
- BuildKit integration for parallel dependency resolution
- Improved layer caching for faster subsequent builds
- Resource limits to prevent container resource contention
- Read-only volume mounts for improved security
- Streamlined startup and reset scripts

TROUBLESHOOTING:
--------------
- If the application doesn't start, check:
  docker-compose logs -f webapp

- If document processing fails for certain files, try:
  - Ensuring the file isn't corrupted
  - Converting the file to a simpler format (e.g., PDF to TXT)

- If you encounter Ollama connectivity issues:
  - Make sure Ollama is running on your host
  - Verify the model is available: ollama list
  - Check Ollama API access: curl http://localhost:11434/api/tags

- For any other issues, check the README.md file

Happy questioning! 

LICENSE INFORMATION:
-----------------
This is Open Source software under the MIT License.
Copyright (c) 2025 Mac-Rufus O. Umeokolo

By using this software, you are agreeing to the terms of the MIT License.
See the full license text in README.md or LICENSE file.
You must read and accept the license before using this application.
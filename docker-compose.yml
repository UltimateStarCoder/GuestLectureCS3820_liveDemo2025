# Docker Compose configuration for the RAG application
version: '3'
services:
  # Ollama service: Provides the LLM capability
  ollama:
    image: ollama/ollama:latest
    volumes:
      - ollama_data:/root/.ollama  # Persist model data across restarts
    ports:
      - "11434:11434"  # Expose Ollama API port
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - rag-network

  # Initialization service: Ensures the Phi model is downloaded
  ollama-init:
    image: curlimages/curl:latest
    volumes:
      - ./init-ollama.sh:/init-ollama.sh  # Mount the initialization script
    entrypoint: ["/bin/sh", "/init-ollama.sh"]
    depends_on:
      - ollama  # Wait for Ollama service to start first
    networks:
      - rag-network

  # Main application service: Streamlit UI and RAG pipeline
  webapp:
    build: .
    volumes:
      - ./app.py:/app/app.py
      - ./init-ollama.sh:/app/init-ollama.sh
      - webapp_data:/app/data
    ports:
      - "8501:8501"  # Expose Streamlit web interface
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - ollama
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        chmod +x /app/init-ollama.sh
        ./init-ollama.sh
        echo "===================================================="
        echo "  RAG Pipeline is starting..."
        echo "  Once initialization is complete, access the app at:"
        echo "  http://localhost:8501"
        echo "===================================================="
        python -m streamlit run app.py --server.address=0.0.0.0 --server.headless=true
        echo "Application is running at http://localhost:8501"
    networks:
      - rag-network

# Persistent volumes definition
volumes:
  ollama_data:  # Stores downloaded models
  webapp_data:

# Network configuration
networks:
  rag-network:
    driver: bridge  # Standard bridge network for container communication 